// <auto-generated />
using System;
using Airbnb.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airbnb.DAL.Migrations
{
    [DbContext(typeof(RentContext))]
    [Migration("20230909095809_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Airbnb.DAL.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62f6cb62-ab84-4b1e-a87d-d6b64d57c315"),
                            Name = " wi-fi ",
                            Picture = "1.jpg"
                        },
                        new
                        {
                            Id = new Guid("4d74fe6e-a922-4d3c-9576-eee68a338b1e"),
                            Name = " Conditioner ",
                            Picture = "2.jpg"
                        },
                        new
                        {
                            Id = new Guid("6b35635e-8d4e-4f6a-aca7-3f251b7d1e85"),
                            Name = " Iron ",
                            Picture = "3.jpg"
                        },
                        new
                        {
                            Id = new Guid("d455e249-7377-476a-bea2-55d1b289cdbe"),
                            Name = " Swimming Pool ",
                            Picture = "4.jpg"
                        },
                        new
                        {
                            Id = new Guid("cf74c420-76f1-4290-89d9-14345074ec71"),
                            Name = " washing machine",
                            Picture = "5.jpg"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId")
                        .IsUnique()
                        .HasFilter("[AmenityId] IS NOT NULL");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RuleId")
                        .IsUnique()
                        .HasFilter("[RuleId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2cba42d-0d6e-427e-a316-99cf2e502388"),
                            URL = "1.jpg"
                        },
                        new
                        {
                            Id = new Guid("d705d907-9693-443a-acf4-40aa5d6bb5cc"),
                            URL = "2.jpg"
                        },
                        new
                        {
                            Id = new Guid("1bd0a899-f0c0-42e8-9aba-ba28cb381f75"),
                            URL = "3.jpg"
                        },
                        new
                        {
                            Id = new Guid("9b2a3642-5fe5-4735-a60a-caa77c3e66f2"),
                            URL = "4.jpg"
                        },
                        new
                        {
                            Id = new Guid("61e47d7b-de60-4cf9-818e-073ecca73fb0"),
                            URL = "5.jpg"
                        },
                        new
                        {
                            Id = new Guid("7d150ab7-0c3e-4f42-8dda-7f9b27c3b292"),
                            URL = "6.jpg"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.Property", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Governorate")
                        .HasColumnType("int");

                    b.Property<int>("NumOfPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropType")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = "6d2fa267-40de-4641-8b26-94ec2fd4130a",
                            City = "New York",
                            Country = 1,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1016),
                            Description = "Beautiful apartment in the heart of the city",
                            Governorate = 2,
                            NumOfPeople = 4,
                            PricePerNight = 100m,
                            PropType = 0,
                            UserID = "2834c442-fde0-44c3-aa20-97b6bf23d36c"
                        },
                        new
                        {
                            Id = "1822f457-a2e3-40c1-b3ce-3b14e2f01893",
                            City = "Los Angeles",
                            Country = 2,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1030),
                            Description = "Luxurious villa with a pool and garden",
                            Governorate = 3,
                            NumOfPeople = 6,
                            PricePerNight = 200m,
                            PropType = 1,
                            UserID = "b54f9418-6573-479e-ae00-3fb9035222af"
                        },
                        new
                        {
                            Id = "fa636394-1176-4498-ba5b-42c85781fdf7",
                            City = "London",
                            Country = 3,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1037),
                            Description = "Cozy cottage by the beach",
                            Governorate = 4,
                            NumOfPeople = 2,
                            PricePerNight = 150m,
                            PropType = 2,
                            UserID = "a0dc6ae0-c640-40c4-aaf6-cdee63309590"
                        },
                        new
                        {
                            Id = "160b1ba2-fbe9-4126-9663-173e25c4f4a1",
                            City = "Paris",
                            Country = 4,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1043),
                            Description = "Cozy studio apartment in the city center",
                            Governorate = 5,
                            NumOfPeople = 1,
                            PricePerNight = 50m,
                            PropType = 4,
                            UserID = "ce1b8acf-75ec-4cca-961e-37ef153b7fee"
                        },
                        new
                        {
                            Id = "f8f93b3b-0fb9-46ee-bc87-2498a9b4e251",
                            City = "Rome",
                            Country = 5,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1050),
                            Description = "Wooden cabin in the woods",
                            Governorate = 6,
                            NumOfPeople = 4,
                            PricePerNight = 100m,
                            PropType = 2,
                            UserID = "13c641c9-8e41-480f-85d8-d0d2af2d3ba7"
                        },
                        new
                        {
                            Id = "dcf81030-7840-4417-9d57-275bc9009f36",
                            City = "Tokyo",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1060),
                            Description = "Luxurious penthouse with a view",
                            Governorate = 7,
                            NumOfPeople = 6,
                            PricePerNight = 200m,
                            PropType = 3,
                            UserID = "dbccdfa1-c95f-4ef4-a317-279f4495c657"
                        },
                        new
                        {
                            Id = "bf0368e6-ff52-4c04-9e2e-fc3940cf99f8",
                            City = "Texas",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1067),
                            Description = "Luxurious penthouse with a view",
                            Governorate = 7,
                            NumOfPeople = 6,
                            PricePerNight = 200m,
                            PropType = 3,
                            UserID = "98edc880-f3c2-42b0-a944-69aa52e9b575"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyAmenity", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertyId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities");
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyRule", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertyId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("PropertyRules");
                });

            modelBuilder.Entity("Airbnb.DAL.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5fd3e4a-51e3-4f70-b613-08e2ec927bbd"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("d7034dfe-ab78-47ec-9625-151678b4367c"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("d42acf89-275b-4684-8a08-9735dc4c6087"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("e54d3ed7-6e2f-4faa-b52c-f22d36d67535"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("50364592-3d72-4f08-8827-a37186cf1aaf"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("13b307e9-af15-4d61-92fb-8838fadc0c1a"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Governorate")
                        .HasColumnType("int");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2834c442-fde0-44c3-aa20-97b6bf23d36c",
                            AccessFailedCount = 0,
                            City = "New York",
                            ConcurrencyStamp = "47862d5c-5c86-4ff9-959a-5b7ebee612b2",
                            Country = 1,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(859),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FName = "John",
                            Governorate = 2,
                            LName = "Doe",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1fa3888-e043-48ad-b69f-9eb098ed45f9",
                            TwoFactorEnabled = false,
                            UserName = "johndoe",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "b54f9418-6573-479e-ae00-3fb9035222af",
                            AccessFailedCount = 0,
                            City = "Los Angeles",
                            ConcurrencyStamp = "331a8bd1-5eda-4bde-96c0-0319c0e5ab1e",
                            Country = 2,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(873),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            FName = "Jane",
                            Governorate = 3,
                            LName = "Doe",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1079093-a376-4ede-82be-4ce863acf5bf",
                            TwoFactorEnabled = false,
                            UserName = "janedoe",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "a0dc6ae0-c640-40c4-aaf6-cdee63309590",
                            AccessFailedCount = 0,
                            City = "London",
                            ConcurrencyStamp = "7cb59212-ea09-491c-b23a-965d3fca7c4f",
                            Country = 3,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(887),
                            Email = "michael.smith@example.com",
                            EmailConfirmed = false,
                            FName = "Michael",
                            Governorate = 4,
                            LName = "Smith",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "321456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9736742c-def7-4891-bc52-2ae046de4f3e",
                            TwoFactorEnabled = false,
                            UserName = "michaelsmith",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "ce1b8acf-75ec-4cca-961e-37ef153b7fee",
                            AccessFailedCount = 0,
                            City = "Paris",
                            ConcurrencyStamp = "3b9eadd6-b72b-46ae-bf88-20905791ee0c",
                            Country = 4,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(900),
                            Email = "david.williams@example.com",
                            EmailConfirmed = false,
                            FName = "David",
                            Governorate = 5,
                            LName = "Williams",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "765432109",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c361641-f309-4228-b38b-2dfc0723aa09",
                            TwoFactorEnabled = false,
                            UserName = "davidwilliams",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "13c641c9-8e41-480f-85d8-d0d2af2d3ba7",
                            AccessFailedCount = 0,
                            City = "Rome",
                            ConcurrencyStamp = "78671400-1253-4060-88c8-fa0fc93cc4c4",
                            Country = 5,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(961),
                            Email = "elizabeth.brown@example.com",
                            EmailConfirmed = false,
                            FName = "Elizabeth",
                            Governorate = 6,
                            LName = "Brown",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "543210987",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9755292-a124-4549-8958-404c292c9f19",
                            TwoFactorEnabled = false,
                            UserName = "elizabethbrown",
                            UserRole = 1
                        },
                        new
                        {
                            Id = "dbccdfa1-c95f-4ef4-a317-279f4495c657",
                            AccessFailedCount = 0,
                            City = "Tokyo",
                            ConcurrencyStamp = "08815831-5d16-4130-ac67-6f478bebef23",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(974),
                            Email = "thomas.anderson@example.com",
                            EmailConfirmed = false,
                            FName = "Thomas",
                            Governorate = 7,
                            LName = "Anderson",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4159c286-bc8b-456d-9891-01f2496836a7",
                            TwoFactorEnabled = false,
                            UserName = "thomasanderson",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "98edc880-f3c2-42b0-a944-69aa52e9b575",
                            AccessFailedCount = 0,
                            City = "Boston",
                            ConcurrencyStamp = "a52df465-d394-460f-8fab-37b636216c86",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(988),
                            Email = "Jasmine.anderson@example.com",
                            EmailConfirmed = false,
                            FName = "Jasmin",
                            Governorate = 2,
                            LName = "Anderson",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee1e7f71-93e9-404c-b7b5-2d3f23d200db",
                            TwoFactorEnabled = false,
                            UserName = "jasmineanderson",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "b9a876a4-346e-4a9f-a671-14bd99e8c910",
                            AccessFailedCount = 0,
                            City = "Texas",
                            ConcurrencyStamp = "77ab6001-bfd3-4b8e-837e-29cf487d0430",
                            Country = 2,
                            CreationDate = new DateTime(2023, 9, 9, 12, 58, 9, 233, DateTimeKind.Local).AddTicks(1000),
                            Email = "sara.zuckerberg@example.com",
                            EmailConfirmed = false,
                            FName = "Sara",
                            Governorate = 7,
                            LName = "zukerberg",
                            LockoutEnabled = false,
                            Password = "password143",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa2fd44c-02af-4c22-b600-519e065470ea",
                            TwoFactorEnabled = false,
                            UserName = "sara.zuckerberg",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.UserReserveProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfb4b4ba-3d7f-4654-94f0-994966722e03"),
                            CheckInDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "160b1ba2-fbe9-4126-9663-173e25c4f4a1",
                            UserId = "dbccdfa1-c95f-4ef4-a317-279f4495c657"
                        },
                        new
                        {
                            Id = new Guid("58e55a68-4a95-4551-808f-c780b2e86fa9"),
                            CheckInDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "bf0368e6-ff52-4c04-9e2e-fc3940cf99f8",
                            UserId = "a0dc6ae0-c640-40c4-aaf6-cdee63309590"
                        },
                        new
                        {
                            Id = new Guid("a47298bc-7667-4252-8ade-3a70e80bc7ac"),
                            CheckInDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "dcf81030-7840-4417-9d57-275bc9009f36",
                            UserId = "b54f9418-6573-479e-ae00-3fb9035222af"
                        },
                        new
                        {
                            Id = new Guid("96be2b5b-9630-4468-98bf-7f862ee0b401"),
                            CheckInDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "1822f457-a2e3-40c1-b3ce-3b14e2f01893",
                            UserId = "13c641c9-8e41-480f-85d8-d0d2af2d3ba7"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.UserReviewProperty", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("PropertyId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            PropertyId = "1822f457-a2e3-40c1-b3ce-3b14e2f01893",
                            UserId = "a0dc6ae0-c640-40c4-aaf6-cdee63309590",
                            Id = new Guid("51c1cb6a-c458-4028-b52e-df31e17636d2"),
                            Rating = 2.3f
                        },
                        new
                        {
                            PropertyId = "fa636394-1176-4498-ba5b-42c85781fdf7",
                            UserId = "b54f9418-6573-479e-ae00-3fb9035222af",
                            Id = new Guid("4435fd79-ceec-40a5-9a4d-bd1ac37a990e"),
                            Rating = 1.2f
                        },
                        new
                        {
                            PropertyId = "f8f93b3b-0fb9-46ee-bc87-2498a9b4e251",
                            UserId = "ce1b8acf-75ec-4cca-961e-37ef153b7fee",
                            Id = new Guid("375f5ff3-3b27-44fd-876f-a1953f7bdc03"),
                            Rating = 4.5f
                        },
                        new
                        {
                            PropertyId = "160b1ba2-fbe9-4126-9663-173e25c4f4a1",
                            UserId = "13c641c9-8e41-480f-85d8-d0d2af2d3ba7",
                            Id = new Guid("8ad821b3-0eae-4ed7-bd52-ba5552f52852"),
                            Rating = 4.5f
                        },
                        new
                        {
                            PropertyId = "dcf81030-7840-4417-9d57-275bc9009f36",
                            UserId = "dbccdfa1-c95f-4ef4-a317-279f4495c657",
                            Id = new Guid("83918fed-352d-4c67-8f44-b0bea1d725c0"),
                            Rating = 4.5f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Airbnb.DAL.Image", b =>
                {
                    b.HasOne("Airbnb.DAL.Amenity", "Amenity")
                        .WithOne("Img")
                        .HasForeignKey("Airbnb.DAL.Image", "AmenityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("Imgs")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airbnb.DAL.Rule", "Rule")
                        .WithOne("Img")
                        .HasForeignKey("Airbnb.DAL.Image", "RuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithOne("Img")
                        .HasForeignKey("Airbnb.DAL.Image", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Amenity");

                    b.Navigation("Property");

                    b.Navigation("Rule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DAL.Property", b =>
                {
                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyAmenity", b =>
                {
                    b.HasOne("Airbnb.DAL.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyRule", b =>
                {
                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("PropertyRules")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.Rule", "Rule")
                        .WithMany("PropertyRules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Airbnb.DAL.UserReserveProperty", b =>
                {
                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DAL.UserReviewProperty", b =>
                {
                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Airbnb.DAL.Amenity", b =>
                {
                    b.Navigation("Img");

                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("Airbnb.DAL.Property", b =>
                {
                    b.Navigation("Imgs");

                    b.Navigation("PropertyAmenities");

                    b.Navigation("PropertyRules");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Airbnb.DAL.Rule", b =>
                {
                    b.Navigation("Img");

                    b.Navigation("PropertyRules");
                });

            modelBuilder.Entity("Airbnb.DAL.User", b =>
                {
                    b.Navigation("Img");

                    b.Navigation("Properties");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
