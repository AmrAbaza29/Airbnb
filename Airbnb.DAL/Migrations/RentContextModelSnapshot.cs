// <auto-generated />
using System;
using Airbnb.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airbnb.DAL.Migrations
{
    [DbContext(typeof(RentContext))]
    partial class RentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Airbnb.DAL.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e48435a4-ae66-4c5e-942a-195ffa40f462"),
                            Name = " wi-fi ",
                            Picture = "1.jpg"
                        },
                        new
                        {
                            Id = new Guid("603ebd6a-a550-473c-811e-54386a452d0b"),
                            Name = " Conditioner ",
                            Picture = "2.jpg"
                        },
                        new
                        {
                            Id = new Guid("55cf6efe-a8fe-4e55-9eb9-74dabfc5be80"),
                            Name = " Iron ",
                            Picture = "3.jpg"
                        },
                        new
                        {
                            Id = new Guid("f4b99885-98e9-4811-ab36-2519943de44e"),
                            Name = " Swimming Pool ",
                            Picture = "4.jpg"
                        },
                        new
                        {
                            Id = new Guid("9e654961-c298-4cdf-b6d3-340471d57284"),
                            Name = " washing machine",
                            Picture = "5.jpg"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId")
                        .IsUnique()
                        .HasFilter("[AmenityId] IS NOT NULL");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RuleId")
                        .IsUnique()
                        .HasFilter("[RuleId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("772b0741-caf1-43c4-991a-0290416cf105"),
                            URL = "1.jpg"
                        },
                        new
                        {
                            Id = new Guid("575d5dc6-5ffd-4b7c-ba11-2027246ad5bc"),
                            URL = "2.jpg"
                        },
                        new
                        {
                            Id = new Guid("bbb1441d-e19c-45c8-9b1a-c1031b04597b"),
                            URL = "3.jpg"
                        },
                        new
                        {
                            Id = new Guid("3955bab6-2ede-4ab0-890b-8d248c5e8134"),
                            URL = "4.jpg"
                        },
                        new
                        {
                            Id = new Guid("416d9511-e0ce-48b2-8e66-619e8badbd26"),
                            URL = "5.jpg"
                        },
                        new
                        {
                            Id = new Guid("65d6aeef-d876-4820-84d9-3dae3226f9e1"),
                            URL = "6.jpg"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.Property", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Governorate")
                        .HasColumnType("int");

                    b.Property<int>("NumOfPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropType")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = "8fe44c35-c24f-4d7a-977e-424318162729",
                            City = "New York",
                            Country = 1,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8845),
                            Description = "Beautiful apartment in the heart of the city",
                            Governorate = 2,
                            NumOfPeople = 4,
                            PricePerNight = 100m,
                            PropType = 0,
                            UserID = "74e47c84-feea-4e20-9096-a552092c6f09"
                        },
                        new
                        {
                            Id = "23fab38d-3a87-4e17-9b5c-97b3e9d992e2",
                            City = "Los Angeles",
                            Country = 2,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8865),
                            Description = "Luxurious villa with a pool and garden",
                            Governorate = 3,
                            NumOfPeople = 6,
                            PricePerNight = 200m,
                            PropType = 1,
                            UserID = "8145ae5c-7bf5-415d-90f6-8f2149cf73bc"
                        },
                        new
                        {
                            Id = "8cbcaf61-9cd2-4884-abc3-8f60a74bca76",
                            City = "London",
                            Country = 3,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8881),
                            Description = "Cozy cottage by the beach",
                            Governorate = 4,
                            NumOfPeople = 2,
                            PricePerNight = 150m,
                            PropType = 2,
                            UserID = "7924436b-7f5f-4850-bff3-0e82e9030db4"
                        },
                        new
                        {
                            Id = "afe5121f-ffa8-4298-a4c2-1c5cc8d7ee0c",
                            City = "Paris",
                            Country = 4,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8893),
                            Description = "Cozy studio apartment in the city center",
                            Governorate = 5,
                            NumOfPeople = 1,
                            PricePerNight = 50m,
                            PropType = 4,
                            UserID = "a2261d27-1adb-4441-9c8d-c7b1d76b9351"
                        },
                        new
                        {
                            Id = "c130bc6c-b583-4995-89d1-c49a758bf189",
                            City = "Rome",
                            Country = 5,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8910),
                            Description = "Wooden cabin in the woods",
                            Governorate = 6,
                            NumOfPeople = 4,
                            PricePerNight = 100m,
                            PropType = 2,
                            UserID = "97b40974-0840-4ba4-9627-0f3819eccac5"
                        },
                        new
                        {
                            Id = "de4f8c56-de71-40db-a34a-5df63a761abd",
                            City = "Tokyo",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8925),
                            Description = "Luxurious penthouse with a view",
                            Governorate = 7,
                            NumOfPeople = 6,
                            PricePerNight = 200m,
                            PropType = 3,
                            UserID = "80e62e27-8144-4028-8fd8-b7889bcbd6fb"
                        },
                        new
                        {
                            Id = "25999634-0518-4f3c-9c31-73e022174f13",
                            City = "Texas",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8939),
                            Description = "Luxurious penthouse with a view",
                            Governorate = 7,
                            NumOfPeople = 6,
                            PricePerNight = 200m,
                            PropType = 3,
                            UserID = "9050c9ce-a306-42af-8a7c-1d70599ecbb0"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyAmenity", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertyId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities");
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyRule", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertyId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("PropertyRules");
                });

            modelBuilder.Entity("Airbnb.DAL.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("994d70ad-3b4d-43d7-8e5b-bb43b22c5c76"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("6bba2c2d-d604-495b-b148-2a261effdbf6"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("5be138b1-85e8-4f08-a047-6c0ca60054d1"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("b96e77e3-dcb6-4267-9c88-59fcdab1ebb9"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("dee7a757-c1b7-4893-90b3-524288cf583d"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        },
                        new
                        {
                            Id = new Guid("d4e5f95f-1c39-4e82-b38a-ff92998ee1f0"),
                            Name = "No Smoking",
                            Picture = "smoking.jpg"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Governorate")
                        .HasColumnType("int");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "74e47c84-feea-4e20-9096-a552092c6f09",
                            AccessFailedCount = 0,
                            City = "New York",
                            ConcurrencyStamp = "3096ed45-925d-4d72-8abf-fc98c4e75686",
                            Country = 1,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8398),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FName = "John",
                            Governorate = 2,
                            LName = "Doe",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2aef09a-ffb0-4e33-9907-7048a976a201",
                            TwoFactorEnabled = false,
                            UserName = "johndoe",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "8145ae5c-7bf5-415d-90f6-8f2149cf73bc",
                            AccessFailedCount = 0,
                            City = "Los Angeles",
                            ConcurrencyStamp = "88cae276-4d57-46e0-857b-d3d7b1281f14",
                            Country = 2,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8430),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            FName = "Jane",
                            Governorate = 3,
                            LName = "Doe",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f13faee-ed59-4f09-9cc5-83f42184710c",
                            TwoFactorEnabled = false,
                            UserName = "janedoe",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "7924436b-7f5f-4850-bff3-0e82e9030db4",
                            AccessFailedCount = 0,
                            City = "London",
                            ConcurrencyStamp = "783efc90-6dbb-4a9d-bbf4-2b2b35ad74f5",
                            Country = 3,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8444),
                            Email = "michael.smith@example.com",
                            EmailConfirmed = false,
                            FName = "Michael",
                            Governorate = 4,
                            LName = "Smith",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "321456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ad061ae-0629-4bd1-a2de-dd14dc51b4e0",
                            TwoFactorEnabled = false,
                            UserName = "michaelsmith",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "a2261d27-1adb-4441-9c8d-c7b1d76b9351",
                            AccessFailedCount = 0,
                            City = "Paris",
                            ConcurrencyStamp = "784bf452-2dec-4343-98e0-504b6f8e7c1c",
                            Country = 4,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8637),
                            Email = "david.williams@example.com",
                            EmailConfirmed = false,
                            FName = "David",
                            Governorate = 5,
                            LName = "Williams",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "765432109",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59e54929-624b-4fdf-ba2f-47661a77721b",
                            TwoFactorEnabled = false,
                            UserName = "davidwilliams",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "97b40974-0840-4ba4-9627-0f3819eccac5",
                            AccessFailedCount = 0,
                            City = "Rome",
                            ConcurrencyStamp = "6f07a583-c5d2-4a9c-834d-d596c5593185",
                            Country = 5,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8656),
                            Email = "elizabeth.brown@example.com",
                            EmailConfirmed = false,
                            FName = "Elizabeth",
                            Governorate = 6,
                            LName = "Brown",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "543210987",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a003463e-1566-4cc7-ab65-e3a64f0e6d03",
                            TwoFactorEnabled = false,
                            UserName = "elizabethbrown",
                            UserRole = 1
                        },
                        new
                        {
                            Id = "80e62e27-8144-4028-8fd8-b7889bcbd6fb",
                            AccessFailedCount = 0,
                            City = "Tokyo",
                            ConcurrencyStamp = "d5b75740-1f3b-42ec-8d71-48368d84fd4f",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8686),
                            Email = "thomas.anderson@example.com",
                            EmailConfirmed = false,
                            FName = "Thomas",
                            Governorate = 7,
                            LName = "Anderson",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6020b8f2-7a2b-4f36-88e8-47fc37fc35ed",
                            TwoFactorEnabled = false,
                            UserName = "thomasanderson",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "9050c9ce-a306-42af-8a7c-1d70599ecbb0",
                            AccessFailedCount = 0,
                            City = "Boston",
                            ConcurrencyStamp = "17eb6f8d-4716-4793-9121-d2bb055e3fc4",
                            Country = 6,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8703),
                            Email = "Jasmine.anderson@example.com",
                            EmailConfirmed = false,
                            FName = "Jasmin",
                            Governorate = 2,
                            LName = "Anderson",
                            LockoutEnabled = false,
                            Password = "password123",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9abe5166-f08c-4bf8-9609-42590981bafe",
                            TwoFactorEnabled = false,
                            UserName = "jasmineanderson",
                            UserRole = 0
                        },
                        new
                        {
                            Id = "eccf057b-0485-4380-8bdd-e02a4c64e2e7",
                            AccessFailedCount = 0,
                            City = "Texas",
                            ConcurrencyStamp = "55e3b399-88ba-4b76-a952-c04d35d7c7f0",
                            Country = 2,
                            CreationDate = new DateTime(2023, 9, 7, 23, 34, 58, 463, DateTimeKind.Local).AddTicks(8727),
                            Email = "sara.zuckerberg@example.com",
                            EmailConfirmed = false,
                            FName = "Sara",
                            Governorate = 7,
                            LName = "zukerberg",
                            LockoutEnabled = false,
                            Password = "password143",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85515acd-55bf-4527-965d-509b65ffe60d",
                            TwoFactorEnabled = false,
                            UserName = "sara.zuckerberg",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.UserReserveProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c022398f-dbe6-4302-bf7c-ea9a5b6fa003"),
                            CheckInDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "afe5121f-ffa8-4298-a4c2-1c5cc8d7ee0c",
                            UserId = "80e62e27-8144-4028-8fd8-b7889bcbd6fb"
                        },
                        new
                        {
                            Id = new Guid("b57580ce-37ab-4e5a-9452-a3b6f151c4af"),
                            CheckInDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "25999634-0518-4f3c-9c31-73e022174f13",
                            UserId = "7924436b-7f5f-4850-bff3-0e82e9030db4"
                        },
                        new
                        {
                            Id = new Guid("00e33fe9-4201-4d89-ae0b-1db2e6c36652"),
                            CheckInDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "de4f8c56-de71-40db-a34a-5df63a761abd",
                            UserId = "8145ae5c-7bf5-415d-90f6-8f2149cf73bc"
                        },
                        new
                        {
                            Id = new Guid("6b737101-d5c8-4d67-9ed5-290f6a991d2e"),
                            CheckInDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = "23fab38d-3a87-4e17-9b5c-97b3e9d992e2",
                            UserId = "97b40974-0840-4ba4-9627-0f3819eccac5"
                        });
                });

            modelBuilder.Entity("Airbnb.DAL.UserReviewProperty", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("PropertyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            PropertyId = "23fab38d-3a87-4e17-9b5c-97b3e9d992e2",
                            UserId = "7924436b-7f5f-4850-bff3-0e82e9030db4",
                            Rating = 2.3f
                        },
                        new
                        {
                            PropertyId = "8cbcaf61-9cd2-4884-abc3-8f60a74bca76",
                            UserId = "8145ae5c-7bf5-415d-90f6-8f2149cf73bc",
                            Rating = 1.2f
                        },
                        new
                        {
                            PropertyId = "c130bc6c-b583-4995-89d1-c49a758bf189",
                            UserId = "a2261d27-1adb-4441-9c8d-c7b1d76b9351",
                            Rating = 4.5f
                        },
                        new
                        {
                            PropertyId = "afe5121f-ffa8-4298-a4c2-1c5cc8d7ee0c",
                            UserId = "97b40974-0840-4ba4-9627-0f3819eccac5",
                            Rating = 4.5f
                        },
                        new
                        {
                            PropertyId = "de4f8c56-de71-40db-a34a-5df63a761abd",
                            UserId = "80e62e27-8144-4028-8fd8-b7889bcbd6fb",
                            Rating = 4.5f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Airbnb.DAL.Image", b =>
                {
                    b.HasOne("Airbnb.DAL.Amenity", "Amenity")
                        .WithOne("Img")
                        .HasForeignKey("Airbnb.DAL.Image", "AmenityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("Imgs")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airbnb.DAL.Rule", "Rule")
                        .WithOne("Img")
                        .HasForeignKey("Airbnb.DAL.Image", "RuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithOne("Img")
                        .HasForeignKey("Airbnb.DAL.Image", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Amenity");

                    b.Navigation("Property");

                    b.Navigation("Rule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DAL.Property", b =>
                {
                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyAmenity", b =>
                {
                    b.HasOne("Airbnb.DAL.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.DAL.PropertyRule", b =>
                {
                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("PropertyRules")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.Rule", "Rule")
                        .WithMany("PropertyRules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Airbnb.DAL.UserReserveProperty", b =>
                {
                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DAL.UserReviewProperty", b =>
                {
                    b.HasOne("Airbnb.DAL.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Airbnb.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Airbnb.DAL.Amenity", b =>
                {
                    b.Navigation("Img");

                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("Airbnb.DAL.Property", b =>
                {
                    b.Navigation("Imgs");

                    b.Navigation("PropertyAmenities");

                    b.Navigation("PropertyRules");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Airbnb.DAL.Rule", b =>
                {
                    b.Navigation("Img");

                    b.Navigation("PropertyRules");
                });

            modelBuilder.Entity("Airbnb.DAL.User", b =>
                {
                    b.Navigation("Img");

                    b.Navigation("Properties");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
